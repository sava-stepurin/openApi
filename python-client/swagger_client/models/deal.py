# coding: utf-8

"""
    Buycycle

    DevOps homework  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Deal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'amount': 'float',
        'lender': 'str',
        'members': 'list[str]',
        'name': 'str',
        'type': 'object'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'lender': 'lender',
        'members': 'members',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, account_id=None, amount=None, lender=None, members=None, name=None, type=None):  # noqa: E501
        """Deal - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._amount = None
        self._lender = None
        self._members = None
        self._name = None
        self._type = None
        self.discriminator = None

        self.account_id = account_id
        self.amount = amount
        self.lender = lender
        self.members = members
        self.name = name
        self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this Deal.  # noqa: E501


        :return: The account_id of this Deal.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Deal.


        :param account_id: The account_id of this Deal.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this Deal.  # noqa: E501


        :return: The amount of this Deal.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Deal.


        :param amount: The amount of this Deal.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def lender(self):
        """Gets the lender of this Deal.  # noqa: E501


        :return: The lender of this Deal.  # noqa: E501
        :rtype: str
        """
        return self._lender

    @lender.setter
    def lender(self, lender):
        """Sets the lender of this Deal.


        :param lender: The lender of this Deal.  # noqa: E501
        :type: str
        """
        if lender is None:
            raise ValueError("Invalid value for `lender`, must not be `None`")  # noqa: E501

        self._lender = lender

    @property
    def members(self):
        """Gets the members of this Deal.  # noqa: E501


        :return: The members of this Deal.  # noqa: E501
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Deal.


        :param members: The members of this Deal.  # noqa: E501
        :type: list[str]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def name(self):
        """Gets the name of this Deal.  # noqa: E501


        :return: The name of this Deal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Deal.


        :param name: The name of this Deal.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Deal.  # noqa: E501


        :return: The type of this Deal.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Deal.


        :param type: The type of this Deal.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
