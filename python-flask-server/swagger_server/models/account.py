# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, persons: List[str]=None, deals: List[str]=None, transfers: List[str]=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param name: The name of this Account.  # noqa: E501
        :type name: str
        :param persons: The persons of this Account.  # noqa: E501
        :type persons: List[str]
        :param deals: The deals of this Account.  # noqa: E501
        :type deals: List[str]
        :param transfers: The transfers of this Account.  # noqa: E501
        :type transfers: List[str]
        """
        self.swagger_types = {
            'name': str,
            'persons': List[str],
            'deals': List[str],
            'transfers': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'persons': 'persons',
            'deals': 'deals',
            'transfers': 'transfers'
        }

        self._name = name
        self._persons = persons
        self._deals = deals
        self._transfers = transfers

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def persons(self) -> List[str]:
        """Gets the persons of this Account.


        :return: The persons of this Account.
        :rtype: List[str]
        """
        return self._persons

    @persons.setter
    def persons(self, persons: List[str]):
        """Sets the persons of this Account.


        :param persons: The persons of this Account.
        :type persons: List[str]
        """

        self._persons = persons

    @property
    def deals(self) -> List[str]:
        """Gets the deals of this Account.


        :return: The deals of this Account.
        :rtype: List[str]
        """
        return self._deals

    @deals.setter
    def deals(self, deals: List[str]):
        """Sets the deals of this Account.


        :param deals: The deals of this Account.
        :type deals: List[str]
        """

        self._deals = deals

    @property
    def transfers(self) -> List[str]:
        """Gets the transfers of this Account.


        :return: The transfers of this Account.
        :rtype: List[str]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers: List[str]):
        """Sets the transfers of this Account.


        :param transfers: The transfers of this Account.
        :type transfers: List[str]
        """

        self._transfers = transfers
