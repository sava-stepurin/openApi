# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PersonDebtors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, amount: str=None):  # noqa: E501
        """PersonDebtors - a model defined in Swagger

        :param name: The name of this PersonDebtors.  # noqa: E501
        :type name: str
        :param amount: The amount of this PersonDebtors.  # noqa: E501
        :type amount: str
        """
        self.swagger_types = {
            'name': str,
            'amount': str
        }

        self.attribute_map = {
            'name': 'name',
            'amount': 'amount'
        }

        self._name = name
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt) -> 'PersonDebtors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person_debtors of this PersonDebtors.  # noqa: E501
        :rtype: PersonDebtors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this PersonDebtors.


        :return: The name of this PersonDebtors.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PersonDebtors.


        :param name: The name of this PersonDebtors.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def amount(self) -> str:
        """Gets the amount of this PersonDebtors.


        :return: The amount of this PersonDebtors.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount: str):
        """Sets the amount of this PersonDebtors.


        :param amount: The amount of this PersonDebtors.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount



class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, name: str=None, debtors: List[PersonDebtors]=None, lenders: List[PersonDebtors]=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param account_id: The account_id of this Person.  # noqa: E501
        :type account_id: str
        :param name: The name of this Person.  # noqa: E501
        :type name: str
        :param debtors: The debtors of this Person.  # noqa: E501
        :type debtors: List[PersonDebtors]
        :param lenders: The lenders of this Person.  # noqa: E501
        :type lenders: List[PersonDebtors]
        """

        self.attribute_map = {
            'account_id': 'accountId',
            'name': 'name',
            'debtors': 'debtors',
            'lenders': 'lenders'
        }

        self._account_id = account_id
        self._name = name
        self._debtors = debtors
        self._lenders = lenders

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Person.


        :return: The account_id of this Person.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Person.


        :param account_id: The account_id of this Person.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def name(self) -> str:
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def debtors(self) -> List[PersonDebtors]:
        """Gets the debtors of this Person.


        :return: The debtors of this Person.
        :rtype: List[PersonDebtors]
        """
        return self._debtors

    @debtors.setter
    def debtors(self, debtors: List[PersonDebtors]):
        """Sets the debtors of this Person.


        :param debtors: The debtors of this Person.
        :type debtors: List[PersonDebtors]
        """

        self._debtors = debtors

    @property
    def lenders(self) -> List[PersonDebtors]:
        """Gets the lenders of this Person.


        :return: The lenders of this Person.
        :rtype: List[PersonDebtors]
        """
        return self._lenders

    @lenders.setter
    def lenders(self, lenders: List[PersonDebtors]):
        """Sets the lenders of this Person.


        :param lenders: The lenders of this Person.
        :type lenders: List[PersonDebtors]
        """

        self._lenders = lenders
