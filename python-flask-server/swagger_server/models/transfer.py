# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transfer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, sender: str=None, receiver: str=None, amount: float=None, currency: str=None):  # noqa: E501
        """Transfer - a model defined in Swagger

        :param account_id: The account_id of this Transfer.  # noqa: E501
        :type account_id: str
        :param sender: The sender of this Transfer.  # noqa: E501
        :type sender: str
        :param receiver: The receiver of this Transfer.  # noqa: E501
        :type receiver: str
        :param amount: The amount of this Transfer.  # noqa: E501
        :type amount: float
        :param currency: The currency of this Transfer.  # noqa: E501
        :type currency: str
        """
        self.swagger_types = {
            'account_id': str,
            'sender': str,
            'receiver': str,
            'amount': float,
            'currency': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'sender': 'sender',
            'receiver': 'receiver',
            'amount': 'amount',
            'currency': 'currency'
        }

        self._account_id = account_id
        self._sender = sender
        self._receiver = receiver
        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'Transfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transfer of this Transfer.  # noqa: E501
        :rtype: Transfer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Transfer.


        :return: The account_id of this Transfer.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Transfer.


        :param account_id: The account_id of this Transfer.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def sender(self) -> str:
        """Gets the sender of this Transfer.


        :return: The sender of this Transfer.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender: str):
        """Sets the sender of this Transfer.


        :param sender: The sender of this Transfer.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def receiver(self) -> str:
        """Gets the receiver of this Transfer.


        :return: The receiver of this Transfer.
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver: str):
        """Sets the receiver of this Transfer.


        :param receiver: The receiver of this Transfer.
        :type receiver: str
        """
        if receiver is None:
            raise ValueError("Invalid value for `receiver`, must not be `None`")  # noqa: E501

        self._receiver = receiver

    @property
    def amount(self) -> float:
        """Gets the amount of this Transfer.


        :return: The amount of this Transfer.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Transfer.


        :param amount: The amount of this Transfer.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self) -> str:
        """Gets the currency of this Transfer.


        :return: The currency of this Transfer.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Transfer.


        :param currency: The currency of this Transfer.
        :type currency: str
        """

        self._currency = currency
