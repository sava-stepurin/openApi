# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Deal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, name: str=None, lender: str=None, members: List[str]=None, amount: float=None, type: object=None):  # noqa: E501
        """Deal - a model defined in Swagger

        :param account_id: The account_id of this Deal.  # noqa: E501
        :type account_id: str
        :param name: The name of this Deal.  # noqa: E501
        :type name: str
        :param lender: The lender of this Deal.  # noqa: E501
        :type lender: str
        :param members: The members of this Deal.  # noqa: E501
        :type members: List[str]
        :param amount: The amount of this Deal.  # noqa: E501
        :type amount: float
        :param type: The type of this Deal.  # noqa: E501
        :type type: object
        """
        self.swagger_types = {
            'account_id': str,
            'name': str,
            'lender': str,
            'members': List[str],
            'amount': float,
            'type': object
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'name': 'name',
            'lender': 'lender',
            'members': 'members',
            'amount': 'amount',
            'type': 'type'
        }

        self._account_id = account_id
        self._name = name
        self._lender = lender
        self._members = members
        self._amount = amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Deal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Deal of this Deal.  # noqa: E501
        :rtype: Deal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Deal.


        :return: The account_id of this Deal.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Deal.


        :param account_id: The account_id of this Deal.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def name(self) -> str:
        """Gets the name of this Deal.


        :return: The name of this Deal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Deal.


        :param name: The name of this Deal.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lender(self) -> str:
        """Gets the lender of this Deal.


        :return: The lender of this Deal.
        :rtype: str
        """
        return self._lender

    @lender.setter
    def lender(self, lender: str):
        """Sets the lender of this Deal.


        :param lender: The lender of this Deal.
        :type lender: str
        """
        if lender is None:
            raise ValueError("Invalid value for `lender`, must not be `None`")  # noqa: E501

        self._lender = lender

    @property
    def members(self) -> List[str]:
        """Gets the members of this Deal.


        :return: The members of this Deal.
        :rtype: List[str]
        """
        return self._members

    @members.setter
    def members(self, members: List[str]):
        """Sets the members of this Deal.


        :param members: The members of this Deal.
        :type members: List[str]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def amount(self) -> float:
        """Gets the amount of this Deal.


        :return: The amount of this Deal.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Deal.


        :param amount: The amount of this Deal.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def type(self) -> object:
        """Gets the type of this Deal.


        :return: The type of this Deal.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type: object):
        """Sets the type of this Deal.


        :param type: The type of this Deal.
        :type type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
